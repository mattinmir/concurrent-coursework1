/* Concurrent Programming Coursework 1
 * Mattin Mir-Tahmasebi 
 * CID: 00824754
 * Imperial College London
 */

const N = 3
range T = 0..N



EAST = 					(open -> OPEN_EAST),
OPEN_EAST = 			(enter -> OPEN_EAST 
						|close -> EAST).

WEST =	 				(exit -> WEST). 

CONTROL =	  			(open -> OPEN[0]),
OPEN[visitors:T] = 		(when (visitors < N) enter -> OPEN[visitors+1]
						|when (visitors > 0) exit -> OPEN[visitors-1]
						|close -> CLOSED[visitors]),
CLOSED[visitors:T] =	(when (visitors > 0) exit -> CLOSED[visitors-1]
						|when (visitors == 0) empty -> CONTROL).



DIRECTOR = 				(open -> DIRECTOR2),
DIRECTOR2 = 			(close -> empty -> open -> DIRECTOR2).

||MUSEUM = 				(CONTROL || DIRECTOR || EAST || WEST)\{empty}.




TEST = 					(open -> close -> TEST2),
TEST2 = 				(enter -> error -> ERROR
						|correct -> TEST).
||TESTMUSEUM = 			(TEST || MUSEUM).




P = 					STOP + {exit}.
||P_MUSEUM = 			(P || MUSEUM).
/*
Safety trace for P_MUSEUM

Trace to DEADLOCK:
	open
	enter
	close

This is a deadlock because visitors can no longer exit, so the museum can never empty, so it can never reopen.
*/